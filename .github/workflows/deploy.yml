name: Deploy Eyes App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            server/package-lock.json
            react-codebase/eyes/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install frontend dependencies
        working-directory: ./react-codebase/eyes
        run: npm ci

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run server tests
        working-directory: ./server
        run: |
          npm test || echo "No tests configured"
          npm run lint || echo "No linting configured"

      - name: Run frontend tests
        working-directory: ./react-codebase/eyes
        run: |
          npm test -- --watchAll=false --passWithNoTests || echo "Tests failed but continuing"
          npm run build

      - name: Run Python tests
        working-directory: ./backend
        run: |
          python -m pytest tests/ || echo "No tests configured"
          python -m flake8 . || echo "No linting configured"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run security audit
        working-directory: ./server
        run: npm audit --audit-level=high || echo "Security issues found but continuing"

      - name: Run frontend security audit
        working-directory: ./react-codebase/eyes
        run: npm audit --audit-level=high || echo "Security issues found but continuing"

  deploy-docker:
    name: Deploy to Docker
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/eyes-server:latest,${{ secrets.DOCKER_USERNAME }}/eyes-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./react-codebase/eyes
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/eyes-frontend:latest,${{ secrets.DOCKER_USERNAME }}/eyes-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./react-codebase/eyes
          vercel-args: '--prod'

  deploy-heroku:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Heroku Backend
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_BACKEND_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "server"

      - name: Deploy to Heroku Frontend
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_FRONTEND_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "react-codebase/eyes"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-docker, deploy-vercel, deploy-heroku]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy-docker.result == 'success' && needs.deploy-vercel.result == 'success' && needs.deploy-heroku.result == 'success'
        run: |
          echo "‚úÖ All deployments successful!"
          echo "üöÄ App deployed to:"
          echo "   - Docker: ${{ secrets.DOCKER_USERNAME }}/eyes-*"
          echo "   - Vercel: Frontend deployed"
          echo "   - Heroku: Backend and Frontend deployed"

      - name: Notify partial success
        if: (needs.deploy-docker.result == 'success' || needs.deploy-vercel.result == 'success' || needs.deploy-heroku.result == 'success') && (needs.deploy-docker.result != 'success' || needs.deploy-vercel.result != 'success' || needs.deploy-heroku.result != 'success')
        run: |
          echo "‚ö†Ô∏è  Partial deployment success:"
          echo "   - Docker: ${{ needs.deploy-docker.result }}"
          echo "   - Vercel: ${{ needs.deploy-vercel.result }}"
          echo "   - Heroku: ${{ needs.deploy-heroku.result }}"

      - name: Notify failure
        if: needs.deploy-docker.result == 'failure' && needs.deploy-vercel.result == 'failure' && needs.deploy-heroku.result == 'failure'
        run: |
          echo "‚ùå All deployments failed!"
          echo "Please check the logs for more details."
