# Development Docker Compose Configuration
# For production, use: docker-compose -f docker-compose.prod.yml up -d

services:
  # MongoDB Service
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: eyes_app
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh -u root -p example --quiet || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend Service (Node.js) - Development Mode
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: backend
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://root:example@mongodb:27017/eyes_app?authSource=admin
      - JWT_SECRET=your_jwt_secret_key
      - JWT_EXPIRES_IN=90d
      - JWT_COOKIE_EXPIRES_IN=90
    ports:
      - "5001:5000"
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    # Override CMD for development (hot reload)
    command: ["npm", "run", "dev"]

  # Frontend Service (React) - Development Mode
  frontend:
    build:
      context: ./react-codebase/eyes
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-network

# Volumes
volumes:
  mongodb_data:

# Networks
networks:
  app-network:
    driver: bridge
